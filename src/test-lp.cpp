#include "lp.h"
#include <testthat.h>

context("testing lp namespace") {
  test_that("vec_diff works") {
    /*
     x <- c(-0.63, 0.18, -0.84, 1.6)
     y <- c(0.33, -0.82, 0.49, 0.74)
     dput(x - y)
     */
    constexpr size_t const n(4L);
    constexpr double const x[4] = { -0.63, 0.18, -0.84, 1.6 },
                           y[4] = { 0.33, -0.82, 0.49, 0.74 },
                           ex[4] = { -0.96, 1, -1.33, 0.86 };
    double res[4];
    lp::vec_diff(x, y, res, n);

    for(size_t i = 0; i < n; ++i)
      expect_true(std::abs(res[i] - ex[i]) < 1e-8);
  }

  test_that("mat_vec_dot works (no seperation)") {
    /*
     X <- c(0.58, -0.31, 1.51, 0.39, -0.62, -2.21, 1.12, -0.04, -0.02, 0.94, 0.82, 0.59, 0.92, 0.78, 0.07, -1.99, 0.62, -0.06, -0.16, -1.47, -0.48, 0.42, 1.36, -0.1, 0.39)
     x <- c(-0.05, -1.38, -0.41, -0.39, -0.06)
     dput(matrix(X, 5) %*% x)
     */
    constexpr size_t const n(5L);
    constexpr double const X[n * n] = { 0.58, -0.31, 1.51, 0.39, -0.62, -2.21, 1.12, -0.04, -0.02, 0.94, 0.82, 0.59, 0.92, 0.78, 0.07, -1.99, 0.62, -0.06, -0.16, -1.47, -0.48, 0.42, 1.36, -0.1, 0.39 },
                           x[n]     = { -0.05, -1.38, -0.41, -0.39, -0.06 },
                          ex[n]     = { 3.4895, -2.039, -0.4557, -0.2433, -0.745 };
    double res[n] = { 0, 0, 0, 0, 0 };

    lp::mat_vec_dot(X, x, res, n);
    for(size_t i = 0; i < n; ++i)
      expect_true(std::abs(res[i] - ex[i]) < 1e-8);
  }

  test_that("mat_vec_dot works (seperation)") {
    /*
     X <- c(0.58, -0.31, 1.51, 0.39, -0.62, -2.21, 1.12, -0.04, -0.02, 0.94, 0.82, 0.59, 0.92, 0.78, 0.07, -1.99, 0.62, -0.06, -0.16, -1.47, -0.48, 0.42, 1.36, -0.1, 0.39)
     x <- c(-1.82, 0.44, 1.09, 0.05, -0.23, 1.23, 0.11, 0.91, 0.03, 1.48)
     s <-c(-0.39, -0.36, 0.71, -0.02, -1.62, 1.45, -0.85, 0.43, -1.34, 0.11)

     idx <- c(1:3, 1:2 + 3L + 5L)
     s[idx] <- s[idx] + matrix(X, 5) %*% x[idx]
     dput(s)
     */
    constexpr size_t const n1(3L),
                           n2(2L),
                            n = n1 + n2,
                          xtr(5L);
    constexpr double const X [n * n  ] = { 0.58, -0.31, 1.51, 0.39, -0.62, -2.21, 1.12, -0.04, -0.02, 0.94, 0.82, 0.59, 0.92, 0.78, 0.07, -1.99, 0.62, -0.06, -0.16, -1.47, -0.48, 0.42, 1.36, -0.1, 0.39 },
                           x [n + xtr] = { -1.82, 0.44, 1.09, 0.05, -0.23, 1.23, 0.11, 0.91, 0.03, 1.48 },
                           ex[n + xtr] = { -2.2943, 1.9803, 0.958, -0.02, -1.62, 1.45, -0.85, 0.43, -1.3612, 2.2614 };
    double res[n + xtr] = { -0.39, -0.36, 0.71, -0.02, -1.62, 1.45, -0.85, 0.43, -1.34, 0.11 };

    lp::mat_vec_dot(X, x, x + n1 + xtr, res, res + n1 + xtr, n1, n2);
    for(size_t i = 0; i < n + xtr; ++i)
      expect_true(std::abs(res[i] - ex[i]) < 1e-8);
  }

  test_that("rank_one_update works") {
    /*
     X <- c(0.58, -0.31, 1.51, 0.39, -0.62, -2.21, 1.12, -0.04, -0.02, 0.94, 0.82, 0.59, 0.92, 0.78, 0.07, -1.99, 0.62, -0.06, -0.16, -1.47, -0.48, 0.42, 1.36, -0.1, 0.39)
     x <- c(-0.05, -1.38, -0.41, -0.39, -0.06)
     dput(matrix(X, 5) + x %o% x * 2.3)
     */
    constexpr size_t const n(5L);
    double X[n * n] = { 0.58, -0.31, 1.51, 0.39, -0.62, -2.21, 1.12, -0.04, -0.02, 0.94, 0.82, 0.59, 0.92, 0.78, 0.07, -1.99, 0.62, -0.06, -0.16, -1.47, -0.48, 0.42, 1.36, -0.1, 0.39 };
    constexpr double const x[n]     = { -0.05, -1.38, -0.41, -0.39, -0.06 },
                          ex[n * n] = { 0.58575, -0.1513, 1.55715, 0.43485, -0.6131, -2.0513, 5.50012, 1.26134, 1.21786, 1.13044, 0.86715, 1.89134, 1.30663, 1.14777, 0.12658, -1.94515, 1.85786, 0.30777, 0.18983, -1.41618, -0.4731, 0.61044, 1.41658, -0.04618, 0.39828 };
    lp::rank_one_update(X, x, 2.3, n);

    for(size_t i = 0; i < n * n; ++i)
      expect_true(std::abs(X[i] - ex[i]) < 1e-8);
  }
}
